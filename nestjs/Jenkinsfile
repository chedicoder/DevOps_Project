pipeline {
    agent any
    environment {
        // GIT
        GIT_URL = "https://gitlab.com/chedicoder/jenkins.git"
        GIT_BRANCH = "master"

        // DOCKER
        DOCKER_IMAGE = "nestjs:1.0"
        CONTAINER_NAME = "nestjs"
        Target_PORT = "3000"
        CONTAINER_PORT = "3000"

        // DockerHub
        USERNAME = "chedi1"
        TOKEN = credentials('DockerHub')

        // TEST
        SONARQUBE_SERVER = 'SonarQube Server'   
        SONARQUBE_SCANNER_TOOL = tool 'SonarQube Scanner'  
        OWASP_DEPENDENCY_CHECK_INSTALLATION = 'OWASP Dependency-Check' 

        // Notification
        EMAIL_ADDRESS = "chadighribi2@gmail.com"
    }

    tools {
        nodejs 'mynodejs' 
    }
    stages {
        stage('Clone & Switch to project branch') {
            steps {
                script {
                    checkout scm
                }
            }
        }
        
        stage('Build Project') {
            steps {
                sh 'npm ci  && npm run build'
            }
        }
        stage('SonarQube analysis') {
            steps {
                script {
                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        sh '${SONARQUBE_SCANNER_TOOL}/bin/sonar-scanner'
                    }
                }
            }
        }
        stage('OWASP Dependency-Check Vulnerabilities') {
            steps {
                script {
                    dependencyCheck additionalArguments: '''
                        -o './'
                        -s './'
                        -f 'ALL'
                        --prettyPrint''', odcInstallation: "${OWASP_DEPENDENCY_CHECK_INSTALLATION}"
                    dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                }
            }
        }
        stage('Build Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                }
            }
        }
        stage('Scan with Trivy') {
            steps {
                script {
                    sh 'trivy image --severity CRITICAL ${DOCKER_IMAGE}'
                }
            }
        }
        stage('Create Container') {
            steps {
                script {
                    sh 'docker rm -f ${CONTAINER_NAME} || true'
                    sh 'docker run -d --name ${CONTAINER_NAME} -p ${CONTAINER_PORT}:${Target_PORT} ${DOCKER_IMAGE}'
                }
            }
        }
        stage('Create Tag') {
            steps {
                script {
                    sh 'docker tag ${DOCKER_IMAGE} ${USERNAME}/${DOCKER_IMAGE}'
                }
            }
        }
        stage('Deploy Image') {
            steps {
                script {
                    sh 'echo ${TOKEN} | docker login -u ${USERNAME} --password-stdin'
                    sh 'docker push ${USERNAME}/${DOCKER_IMAGE}'
                }
            }
        }
    }

    post {
        failure {
            mail to: "${env.EMAIL_ADDRESS}",
                 cc: 'ccedpeople@gmail.com',
                 subject: "FAILED: Build ${env.JOB_NAME}",
                 body: "Build failed ${env.JOB_NAME} build no: ${env.BUILD_NUMBER}.\n\nView the log at:\n${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
        }

        success {
            mail to: "${env.EMAIL_ADDRESS}",
                 cc: 'ccedpeople@gmail.com',
                 subject: "SUCCESSFUL: Build ${env.JOB_NAME}",
                 body: "Build Successful ${env.JOB_NAME} build no: ${env.BUILD_NUMBER}\n\nView the log at:\n${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
        }

        aborted {
            mail to: "${env.EMAIL_ADDRESS}",
                 cc: 'ccedpeople@gmail.com',
                 subject: "ABORTED: Build ${env.JOB_NAME}",
                 body: "Build was aborted ${env.JOB_NAME} build no: ${env.BUILD_NUMBER}\n\nView the log at:\n${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
        }
    }
}
